{"ast":null,"code":"var _jsxFileName = \"/Users/Devinci/Desktop/AppAcademy/Teach/06-December-Break/use-effect-giphy/starter/src/Gif.js\";\nimport React, { useState, useEffect } from 'react';\nimport { apiBaseUrl, giphyKey } from './config';\n\nconst Gif = props => {\n  const [imgUrl, setImgUrl] = useState('');\n  const [checkImg, setCheckImg] = useState('');\n  const [isLoading, setIsLoading] = useState(true); // create a useEffect that sets a reminder timeout where every 10 seconds it checks to see if the user has chosen a new gif. Leave an alert saying 'This alert will show if you do not make a new gif request within 10 seconds' and clear the reminder. It should run after every render\n  // Remember to clear the timeout as a cleanup\n  // create a useEffect to fetch a GIF based on the search props\n  // inside the useEffect create a function fectchGif that does several things asyncronously\n  //  1. it should set isLoading state to true\n  //  2. it should fetch the GIF using the fetch api with the baseURL from config.js as well as the key\n  //  3. if the res returns ok it should do the following:\n  //    a. if the word is not in the database,\n  //      1) prompt the user that the word isn't in the database and store that new word from the prompt\n  //      2)  set the searchQuery prop with a new word\n  //    b. if the word is in the datbase\n  //      1) set a variable gifUrl with the string url for the GIF\n  //      2) set the state with the gifUrl,\n  //      3) set isLoading to false\n  //  4. invoke the function\n  // the useEffect should run when one of the props changes\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 12\n      }\n    }, \"Searching for gif...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"img\", {\n    src: `${imgUrl}`,\n    alt: \"gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Gif;","map":{"version":3,"sources":["/Users/Devinci/Desktop/AppAcademy/Teach/06-December-Break/use-effect-giphy/starter/src/Gif.js"],"names":["React","useState","useEffect","apiBaseUrl","giphyKey","Gif","props","imgUrl","setImgUrl","checkImg","setCheckImg","isLoading","setIsLoading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,UAArC;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACrB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C,CAHqB,CAKrB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIU,SAAJ,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACD;;AAED,sBAAO;AAAK,IAAA,GAAG,EAAG,GAAEJ,MAAO,EAApB;AAAuB,IAAA,GAAG,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA7BD;;AA+BA,eAAeF,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { apiBaseUrl, giphyKey } from './config';\n\nconst Gif = (props) => {\n  const [imgUrl, setImgUrl] = useState('');\n  const [checkImg, setCheckImg] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // create a useEffect that sets a reminder timeout where every 10 seconds it checks to see if the user has chosen a new gif. Leave an alert saying 'This alert will show if you do not make a new gif request within 10 seconds' and clear the reminder. It should run after every render\n\n  // Remember to clear the timeout as a cleanup\n\n  // create a useEffect to fetch a GIF based on the search props\n  // inside the useEffect create a function fectchGif that does several things asyncronously\n  //  1. it should set isLoading state to true\n  //  2. it should fetch the GIF using the fetch api with the baseURL from config.js as well as the key\n  //  3. if the res returns ok it should do the following:\n  //    a. if the word is not in the database,\n  //      1) prompt the user that the word isn't in the database and store that new word from the prompt\n  //      2)  set the searchQuery prop with a new word\n  //    b. if the word is in the datbase\n  //      1) set a variable gifUrl with the string url for the GIF\n  //      2) set the state with the gifUrl,\n  //      3) set isLoading to false\n  //  4. invoke the function\n  // the useEffect should run when one of the props changes\n\n  if (isLoading) {\n    return <h1>Searching for gif...</h1>;\n  }\n\n  return <img src={`${imgUrl}`} alt='gif' />;\n};\n\nexport default Gif;\n"]},"metadata":{},"sourceType":"module"}