{"ast":null,"code":"var _jsxFileName = \"/Users/Devinci/Desktop/AppAcademy/Teach/06-December-Break/use-effect-giphy/solution/src/Gif.js\";\nimport React, { useState, useEffect } from 'react';\nimport { apiBaseUrl, giphyKey } from './config';\n\nconst Gif = props => {\n  const [imgUrl, setImgUrl] = useState('');\n  const [checkImg, setCheckImg] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const reminder = setTimeout(() => {\n      if (checkImg === props.searchQuery) {\n        alert('This alert will show if you do not make a new gif request within 10 seconds');\n        clearTimeout(reminder);\n      }\n    }, 10000);\n    return () => clearTimeout(reminder);\n  });\n  useEffect(() => {\n    localStorage.setItem('myGiphy', props.searchQuery);\n  }, [props.searchQuery]);\n  useEffect(() => {\n    const fetchGif = async () => {\n      console.log(props.searchQuery);\n      setIsLoading(true);\n      const res = await fetch(`${apiBaseUrl}${props.searchQuery}&api_key=${giphyKey}`);\n\n      if (res.ok) {\n        const giphyRes = await res.json();\n\n        if (!giphyRes.data.length) {\n          const newWord = prompt('That word is not in our database. Please enter another word:');\n          props.setSearchQuery(newWord);\n        } else {\n          const gifUrl = giphyRes.data[0].images.fixed_width.url;\n          setImgUrl(gifUrl);\n          setCheckImg(props.searchQuery);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    fetchGif();\n  }, [props]);\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    }, \"Searching for gif...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"img\", {\n    src: `${imgUrl}`,\n    alt: \"gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Gif;","map":{"version":3,"sources":["/Users/Devinci/Desktop/AppAcademy/Teach/06-December-Break/use-effect-giphy/solution/src/Gif.js"],"names":["React","useState","useEffect","apiBaseUrl","giphyKey","Gif","props","imgUrl","setImgUrl","checkImg","setCheckImg","isLoading","setIsLoading","reminder","setTimeout","searchQuery","alert","clearTimeout","localStorage","setItem","fetchGif","console","log","res","fetch","ok","giphyRes","json","data","length","newWord","prompt","setSearchQuery","gifUrl","images","fixed_width","url"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,UAArC;;AAEA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,QAAQ,GAAGC,UAAU,CAAC,MAAM;AAChC,UAAIL,QAAQ,KAAKH,KAAK,CAACS,WAAvB,EAAoC;AAClCC,QAAAA,KAAK,CACH,6EADG,CAAL;AAGAC,QAAAA,YAAY,CAACJ,QAAD,CAAZ;AACD;AACF,KAP0B,EAOxB,KAPwB,CAA3B;AASA,WAAO,MAAMI,YAAY,CAACJ,QAAD,CAAzB;AACD,GAXQ,CAAT;AAaAX,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCb,KAAK,CAACS,WAAtC;AACD,GAFQ,EAEN,CAACT,KAAK,CAACS,WAAP,CAFM,CAAT;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,QAAQ,GAAG,YAAY;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAK,CAACS,WAAlB;AACAH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMW,GAAG,GAAG,MAAMC,KAAK,CACpB,GAAErB,UAAW,GAAEG,KAAK,CAACS,WAAY,YAAWX,QAAS,EADjC,CAAvB;;AAGA,UAAImB,GAAG,CAACE,EAAR,EAAY;AACV,cAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAvB;;AACA,YAAI,CAACD,QAAQ,CAACE,IAAT,CAAcC,MAAnB,EAA2B;AACzB,gBAAMC,OAAO,GAAGC,MAAM,CACpB,8DADoB,CAAtB;AAGAzB,UAAAA,KAAK,CAAC0B,cAAN,CAAqBF,OAArB;AACD,SALD,MAKO;AACL,gBAAMG,MAAM,GAAGP,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBM,MAAjB,CAAwBC,WAAxB,CAAoCC,GAAnD;AACA5B,UAAAA,SAAS,CAACyB,MAAD,CAAT;AACAvB,UAAAA,WAAW,CAACJ,KAAK,CAACS,WAAP,CAAX;AACAH,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;AACF,KApBD;;AAqBAQ,IAAAA,QAAQ;AACT,GAvBQ,EAuBN,CAACd,KAAD,CAvBM,CAAT;;AAyBA,MAAIK,SAAJ,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACD;;AAED,sBAAO;AAAK,IAAA,GAAG,EAAG,GAAEJ,MAAO,EAApB;AAAuB,IAAA,GAAG,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CApDD;;AAsDA,eAAeF,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { apiBaseUrl, giphyKey } from './config';\n\nconst Gif = props => {\n  const [imgUrl, setImgUrl] = useState('');\n  const [checkImg, setCheckImg] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const reminder = setTimeout(() => {\n      if (checkImg === props.searchQuery) {\n        alert(\n          'This alert will show if you do not make a new gif request within 10 seconds'\n        );\n        clearTimeout(reminder);\n      }\n    }, 10000);\n\n    return () => clearTimeout(reminder);\n  });\n\n  useEffect(() => {\n    localStorage.setItem('myGiphy', props.searchQuery);\n  }, [props.searchQuery]);\n\n  useEffect(() => {\n    const fetchGif = async () => {\n      console.log(props.searchQuery);\n      setIsLoading(true);\n      const res = await fetch(\n        `${apiBaseUrl}${props.searchQuery}&api_key=${giphyKey}`\n      );\n      if (res.ok) {\n        const giphyRes = await res.json();\n        if (!giphyRes.data.length) {\n          const newWord = prompt(\n            'That word is not in our database. Please enter another word:'\n          );\n          props.setSearchQuery(newWord);\n        } else {\n          const gifUrl = giphyRes.data[0].images.fixed_width.url;\n          setImgUrl(gifUrl);\n          setCheckImg(props.searchQuery);\n          setIsLoading(false);\n        }\n      }\n    };\n    fetchGif();\n  }, [props]);\n\n  if (isLoading) {\n    return <h1>Searching for gif...</h1>;\n  }\n\n  return <img src={`${imgUrl}`} alt='gif' />;\n};\n\nexport default Gif;\n"]},"metadata":{},"sourceType":"module"}